(defun add1 (n)
  (+ n 1)
  )

(defun sub1 (n)
  (+ n -1)
  )

(defun partitions (cards subtotal)
  ;(print cards)
  ;(print subtotal)
  (let ((m 0))
  (do ((i 0 (1+ i)))
      ((> i 9))
    (if (> (aref cards i) 0)
	  (cond
	   ((< (+ 1 (+ subtotal i)) 21)
	    (setq m (add1 m))
	    (setf (aref cards i) (sub1 (aref cards i)))
	    (setq m (+ m (partitions cards (+ 1 (+ subtotal i)))))
	    (setf (aref cards i) (add1 (aref cards i))))
	   ((= (+ 1 (+ subtotal i)) 21)
	    (setq m (add1 m)))
	   )
      )
    )
  m)
)

(setf deck (make-array '(10)
		       :initial-contents '(4 4 4 4 4 4 4 4 4 16)
		       )
      )

(let ((d 0))
(let ((p 0))
(let ((n 0))

(do ((i 0 (1+ i)))
    ((> i 9))
  (setf (aref deck i) (sub1 (aref deck i)))
  (setf p 0)
  (do ((j 0 (1+ j)))
      ((> j 9))
    (setf (aref deck j) (sub1 (aref deck j)))
    (setf n (partitions deck (add1 j)))
    (setf (aref deck j) (add1 (aref deck j)))
    (setf p (+ p n)))
  (print (list i p))
  ;(terpri)
  (setf d (+ d p))
  (setf (aref deck i) (add1 (aref deck i))))

(print d)
;(terpri)
)))
